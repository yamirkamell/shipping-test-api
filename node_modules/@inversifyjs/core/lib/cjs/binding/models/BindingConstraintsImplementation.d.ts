import { ServiceIdentifier } from '@inversifyjs/common';
import { SingleInmutableLinkedListNode } from '../../common/models/SingleInmutableLinkedList';
import { MetadataName } from '../../metadata/models/MetadataName';
import { MetadataTag } from '../../metadata/models/MetadataTag';
import { BindingConstraints } from './BindingConstraints';
export interface InternalBindingConstraints {
    readonly name: MetadataName | undefined;
    readonly tags: Map<MetadataTag, unknown>;
    readonly serviceIdentifier: ServiceIdentifier;
}
export declare class BindingConstraintsImplementation implements BindingConstraints {
    #private;
    constructor(node: SingleInmutableLinkedListNode<InternalBindingConstraints>);
    get name(): MetadataName | undefined;
    get serviceIdentifier(): ServiceIdentifier;
    get tags(): Map<MetadataTag, unknown>;
    getAncestor(): BindingConstraints | undefined;
}
//# sourceMappingURL=BindingConstraintsImplementation.d.ts.map