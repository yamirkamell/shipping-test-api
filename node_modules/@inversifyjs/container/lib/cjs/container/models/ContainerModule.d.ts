import { ServiceIdentifier } from '@inversifyjs/common';
import { BindingActivation, BindingDeactivation } from '@inversifyjs/core';
import { BindToFluentSyntax } from '../../binding/models/BindingFluentSyntax';
import { IsBoundOptions } from './isBoundOptions';
export interface ContainerModuleLoadOptions {
    bind: <T>(serviceIdentifier: ServiceIdentifier<T>) => BindToFluentSyntax<T>;
    isBound: (serviceIdentifier: ServiceIdentifier, options?: IsBoundOptions) => boolean;
    onActivation: <T>(serviceIdentifier: ServiceIdentifier<T>, activation: BindingActivation<T>) => void;
    onDeactivation: <T>(serviceIdentifier: ServiceIdentifier<T>, deactivation: BindingDeactivation<T>) => void;
    unbind: (serviceIdentifier: ServiceIdentifier) => Promise<void>;
}
export declare class ContainerModule {
    #private;
    constructor(load: (options: ContainerModuleLoadOptions) => void | Promise<void>);
    get id(): number;
    load(options: ContainerModuleLoadOptions): Promise<void>;
}
//# sourceMappingURL=ContainerModule.d.ts.map